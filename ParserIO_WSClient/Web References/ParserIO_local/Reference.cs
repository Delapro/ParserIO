//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
// 
#pragma warning disable 1591

namespace ParserIO_WSClient.ParserIO_local {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ParserIO_WSSoap", Namespace="urn:Phast/ParserIO")]
    public partial class ParserIO_WS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback Parse_1OperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ParserIO_WS() {
            this.Url = global::ParserIO_WSClient.Properties.Settings.Default.CIOdm_ParserIO_WSClient_CIOdm_ParserIO_local_CIOdm_ParserIO;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event Parse_1CompletedEventHandler Parse_1Completed;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:Phast/ParserIO/Parse_1", RequestNamespace="urn:Phast/ParserIO", ResponseNamespace="urn:Phast/ParserIO", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Parse_1(
                    string Barcode, 
                    out string ACL, 
                    out string ADDITIONALID, 
                    out string BESTBEFORE, 
                    out string CIP, 
                    out string Company, 
                    out bool containsOrMayContainId, 
                    out string CONTENT, 
                    out string COUNT, 
                    out string EAN, 
                    out string Expiry, 
                    out string Family, 
                    out string GTIN, 
                    out string LIC, 
                    out string Lot, 
                    out string LPP, 
                    out string NaS7, 
                    out string NormalizedBESTBEFORE, 
                    out string NormalizedExpiry, 
                    out string NormalizedPRODDATE, 
                    out string PCN, 
                    out string PRODDATE, 
                    out string Product, 
                    out string Quantity, 
                    out string Reference, 
                    out string returnNaSIdNameParam, 
                    out string Serial, 
                    out string SSCC, 
                    out string SubType, 
                    out string SymbologyID, 
                    out string Type, 
                    out string UoM, 
                    out string UPN, 
                    out string VARCOUNT, 
                    out string VARIANT, 
                    out string Errors) {
            object[] results = this.Invoke("Parse_1", new object[] {
                        Barcode});
            ACL = ((string)(results[1]));
            ADDITIONALID = ((string)(results[2]));
            BESTBEFORE = ((string)(results[3]));
            CIP = ((string)(results[4]));
            Company = ((string)(results[5]));
            containsOrMayContainId = ((bool)(results[6]));
            CONTENT = ((string)(results[7]));
            COUNT = ((string)(results[8]));
            EAN = ((string)(results[9]));
            Expiry = ((string)(results[10]));
            Family = ((string)(results[11]));
            GTIN = ((string)(results[12]));
            LIC = ((string)(results[13]));
            Lot = ((string)(results[14]));
            LPP = ((string)(results[15]));
            NaS7 = ((string)(results[16]));
            NormalizedBESTBEFORE = ((string)(results[17]));
            NormalizedExpiry = ((string)(results[18]));
            NormalizedPRODDATE = ((string)(results[19]));
            PCN = ((string)(results[20]));
            PRODDATE = ((string)(results[21]));
            Product = ((string)(results[22]));
            Quantity = ((string)(results[23]));
            Reference = ((string)(results[24]));
            returnNaSIdNameParam = ((string)(results[25]));
            Serial = ((string)(results[26]));
            SSCC = ((string)(results[27]));
            SubType = ((string)(results[28]));
            SymbologyID = ((string)(results[29]));
            Type = ((string)(results[30]));
            UoM = ((string)(results[31]));
            UPN = ((string)(results[32]));
            VARCOUNT = ((string)(results[33]));
            VARIANT = ((string)(results[34]));
            Errors = ((string)(results[35]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void Parse_1Async(string Barcode) {
            this.Parse_1Async(Barcode, null);
        }
        
        /// <remarks/>
        public void Parse_1Async(string Barcode, object userState) {
            if ((this.Parse_1OperationCompleted == null)) {
                this.Parse_1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnParse_1OperationCompleted);
            }
            this.InvokeAsync("Parse_1", new object[] {
                        Barcode}, this.Parse_1OperationCompleted, userState);
        }
        
        private void OnParse_1OperationCompleted(object arg) {
            if ((this.Parse_1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Parse_1Completed(this, new Parse_1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void Parse_1CompletedEventHandler(object sender, Parse_1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Parse_1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Parse_1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ACL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ADDITIONALID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string BESTBEFORE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string CIP {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string Company {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public bool containsOrMayContainId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string CONTENT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string COUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string EAN {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public string Expiry {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public string Family {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public string GTIN {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
        
        /// <remarks/>
        public string LIC {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[13]));
            }
        }
        
        /// <remarks/>
        public string Lot {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[14]));
            }
        }
        
        /// <remarks/>
        public string LPP {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[15]));
            }
        }
        
        /// <remarks/>
        public string NaS7 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[16]));
            }
        }
        
        /// <remarks/>
        public string NormalizedBESTBEFORE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[17]));
            }
        }
        
        /// <remarks/>
        public string NormalizedExpiry {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[18]));
            }
        }
        
        /// <remarks/>
        public string NormalizedPRODDATE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[19]));
            }
        }
        
        /// <remarks/>
        public string PCN {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[20]));
            }
        }
        
        /// <remarks/>
        public string PRODDATE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[21]));
            }
        }
        
        /// <remarks/>
        public string Product {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[22]));
            }
        }
        
        /// <remarks/>
        public string Quantity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[23]));
            }
        }
        
        /// <remarks/>
        public string Reference {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[24]));
            }
        }
        
        /// <remarks/>
        public string returnNaSIdNameParam {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[25]));
            }
        }
        
        /// <remarks/>
        public string Serial {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[26]));
            }
        }
        
        /// <remarks/>
        public string SSCC {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[27]));
            }
        }
        
        /// <remarks/>
        public string SubType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[28]));
            }
        }
        
        /// <remarks/>
        public string SymbologyID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[29]));
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[30]));
            }
        }
        
        /// <remarks/>
        public string UoM {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[31]));
            }
        }
        
        /// <remarks/>
        public string UPN {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[32]));
            }
        }
        
        /// <remarks/>
        public string VARCOUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[33]));
            }
        }
        
        /// <remarks/>
        public string VARIANT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[34]));
            }
        }
        
        /// <remarks/>
        public string Errors {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[35]));
            }
        }
    }
}

#pragma warning restore 1591