//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18052.
// 
#pragma warning disable 1591

namespace ParserIO_WSBenchmark.ParserIO {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CIOdm_ParserIOSoap", Namespace="http://www.Phast.fr/RLIO/CIOdm")]
    public partial class CIOdm_ParserIO : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback Parse_11OperationCompleted;
        
        private System.Threading.SendOrPostCallback Parse_22OperationCompleted;
        
        private System.Threading.SendOrPostCallback Parse_30OperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CIOdm_ParserIO() {
            this.Url = global::ParserIO_WSBenchmark.Properties.Settings.Default.CIOdm_ParserIO_WSBenchmark_CIOdm_ParserIO_CIOdm_ParserIO;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event Parse_11CompletedEventHandler Parse_11Completed;
        
        /// <remarks/>
        public event Parse_22CompletedEventHandler Parse_22Completed;
        
        /// <remarks/>
        public event Parse_30CompletedEventHandler Parse_30Completed;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.Phast.fr/RLIO/CIOdm/Parse_11", RequestNamespace="http://www.Phast.fr/RLIO/CIOdm", ResponseNamespace="http://www.Phast.fr/RLIO/CIOdm", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Parse_11(string Code_barres, out string Type, out string Variante, out string Entreprise, out string Produit, out string GTIN, out string LIC, out string PCN, out string Lot, out string dateRaw, out string DateNormale, out string Reference, out string Erreurs) {
            object[] results = this.Invoke("Parse_11", new object[] {
                        Code_barres});
            Type = ((string)(results[1]));
            Variante = ((string)(results[2]));
            Entreprise = ((string)(results[3]));
            Produit = ((string)(results[4]));
            GTIN = ((string)(results[5]));
            LIC = ((string)(results[6]));
            PCN = ((string)(results[7]));
            Lot = ((string)(results[8]));
            dateRaw = ((string)(results[9]));
            DateNormale = ((string)(results[10]));
            Reference = ((string)(results[11]));
            Erreurs = ((string)(results[12]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void Parse_11Async(string Code_barres) {
            this.Parse_11Async(Code_barres, null);
        }
        
        /// <remarks/>
        public void Parse_11Async(string Code_barres, object userState) {
            if ((this.Parse_11OperationCompleted == null)) {
                this.Parse_11OperationCompleted = new System.Threading.SendOrPostCallback(this.OnParse_11OperationCompleted);
            }
            this.InvokeAsync("Parse_11", new object[] {
                        Code_barres}, this.Parse_11OperationCompleted, userState);
        }
        
        private void OnParse_11OperationCompleted(object arg) {
            if ((this.Parse_11Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Parse_11Completed(this, new Parse_11CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.Phast.fr/RLIO/CIOdm/Parse_22", RequestNamespace="http://www.Phast.fr/RLIO/CIOdm", ResponseNamespace="http://www.Phast.fr/RLIO/CIOdm", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Parse_22(
                    string Code_barres, 
                    out string Type, 
                    out string Variante, 
                    out string Entreprise, 
                    out string Produit, 
                    out string GTIN, 
                    out string LIC, 
                    out string PCN, 
                    out string Lot, 
                    out string BESTBEFORE, 
                    out string NormalizedBESTBEFORE, 
                    out string Expiry, 
                    out string NormalizedExpiry, 
                    out string CONTENT, 
                    out string COUNT, 
                    out string PRODDATE, 
                    out string NormalizedPRODDATE, 
                    out string Quantite, 
                    out string Reference, 
                    out string SSCC, 
                    out string Serial, 
                    out string VARCOUNT, 
                    out string VARIANT, 
                    out string Erreurs) {
            object[] results = this.Invoke("Parse_22", new object[] {
                        Code_barres});
            Type = ((string)(results[1]));
            Variante = ((string)(results[2]));
            Entreprise = ((string)(results[3]));
            Produit = ((string)(results[4]));
            GTIN = ((string)(results[5]));
            LIC = ((string)(results[6]));
            PCN = ((string)(results[7]));
            Lot = ((string)(results[8]));
            BESTBEFORE = ((string)(results[9]));
            NormalizedBESTBEFORE = ((string)(results[10]));
            Expiry = ((string)(results[11]));
            NormalizedExpiry = ((string)(results[12]));
            CONTENT = ((string)(results[13]));
            COUNT = ((string)(results[14]));
            PRODDATE = ((string)(results[15]));
            NormalizedPRODDATE = ((string)(results[16]));
            Quantite = ((string)(results[17]));
            Reference = ((string)(results[18]));
            SSCC = ((string)(results[19]));
            Serial = ((string)(results[20]));
            VARCOUNT = ((string)(results[21]));
            VARIANT = ((string)(results[22]));
            Erreurs = ((string)(results[23]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void Parse_22Async(string Code_barres) {
            this.Parse_22Async(Code_barres, null);
        }
        
        /// <remarks/>
        public void Parse_22Async(string Code_barres, object userState) {
            if ((this.Parse_22OperationCompleted == null)) {
                this.Parse_22OperationCompleted = new System.Threading.SendOrPostCallback(this.OnParse_22OperationCompleted);
            }
            this.InvokeAsync("Parse_22", new object[] {
                        Code_barres}, this.Parse_22OperationCompleted, userState);
        }
        
        private void OnParse_22OperationCompleted(object arg) {
            if ((this.Parse_22Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Parse_22Completed(this, new Parse_22CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.Phast.fr/RLIO/CIOdm/Parse_30", RequestNamespace="http://www.Phast.fr/RLIO/CIOdm", ResponseNamespace="http://www.Phast.fr/RLIO/CIOdm", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Parse_30(
                    string Code_barres, 
                    out string ACL, 
                    out string ADDITIONALID, 
                    out string BESTBEFORE, 
                    out string CIP, 
                    out string Company, 
                    out string CONTENT, 
                    out string COUNT, 
                    out string Expiry, 
                    out string Family, 
                    out string GTIN, 
                    out string LIC, 
                    out string Lot, 
                    out string LPP, 
                    out string NaS7, 
                    out string NormalizedBESTBEFORE, 
                    out string NormalizedExpiry, 
                    out string NormalizedPRODDATE, 
                    out string PCN, 
                    out string PRODDATE, 
                    out string Produit, 
                    out string Quantity, 
                    out string Reference, 
                    out string Serial, 
                    out string SSCC, 
                    out string SubType, 
                    out string Type, 
                    out string UCD, 
                    out string UoM, 
                    out string VARCOUNT, 
                    out string VARIANT, 
                    out string Erreurs) {
            object[] results = this.Invoke("Parse_30", new object[] {
                        Code_barres});
            ACL = ((string)(results[1]));
            ADDITIONALID = ((string)(results[2]));
            BESTBEFORE = ((string)(results[3]));
            CIP = ((string)(results[4]));
            Company = ((string)(results[5]));
            CONTENT = ((string)(results[6]));
            COUNT = ((string)(results[7]));
            Expiry = ((string)(results[8]));
            Family = ((string)(results[9]));
            GTIN = ((string)(results[10]));
            LIC = ((string)(results[11]));
            Lot = ((string)(results[12]));
            LPP = ((string)(results[13]));
            NaS7 = ((string)(results[14]));
            NormalizedBESTBEFORE = ((string)(results[15]));
            NormalizedExpiry = ((string)(results[16]));
            NormalizedPRODDATE = ((string)(results[17]));
            PCN = ((string)(results[18]));
            PRODDATE = ((string)(results[19]));
            Produit = ((string)(results[20]));
            Quantity = ((string)(results[21]));
            Reference = ((string)(results[22]));
            Serial = ((string)(results[23]));
            SSCC = ((string)(results[24]));
            SubType = ((string)(results[25]));
            Type = ((string)(results[26]));
            UCD = ((string)(results[27]));
            UoM = ((string)(results[28]));
            VARCOUNT = ((string)(results[29]));
            VARIANT = ((string)(results[30]));
            Erreurs = ((string)(results[31]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void Parse_30Async(string Code_barres) {
            this.Parse_30Async(Code_barres, null);
        }
        
        /// <remarks/>
        public void Parse_30Async(string Code_barres, object userState) {
            if ((this.Parse_30OperationCompleted == null)) {
                this.Parse_30OperationCompleted = new System.Threading.SendOrPostCallback(this.OnParse_30OperationCompleted);
            }
            this.InvokeAsync("Parse_30", new object[] {
                        Code_barres}, this.Parse_30OperationCompleted, userState);
        }
        
        private void OnParse_30OperationCompleted(object arg) {
            if ((this.Parse_30Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Parse_30Completed(this, new Parse_30CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void Parse_11CompletedEventHandler(object sender, Parse_11CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Parse_11CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Parse_11CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string Variante {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string Entreprise {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string Produit {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string GTIN {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string LIC {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string PCN {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string Lot {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string dateRaw {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public string DateNormale {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public string Reference {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public string Erreurs {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void Parse_22CompletedEventHandler(object sender, Parse_22CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Parse_22CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Parse_22CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string Variante {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string Entreprise {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string Produit {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string GTIN {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string LIC {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string PCN {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string Lot {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string BESTBEFORE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public string NormalizedBESTBEFORE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public string Expiry {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public string NormalizedExpiry {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
        
        /// <remarks/>
        public string CONTENT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[13]));
            }
        }
        
        /// <remarks/>
        public string COUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[14]));
            }
        }
        
        /// <remarks/>
        public string PRODDATE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[15]));
            }
        }
        
        /// <remarks/>
        public string NormalizedPRODDATE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[16]));
            }
        }
        
        /// <remarks/>
        public string Quantite {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[17]));
            }
        }
        
        /// <remarks/>
        public string Reference {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[18]));
            }
        }
        
        /// <remarks/>
        public string SSCC {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[19]));
            }
        }
        
        /// <remarks/>
        public string Serial {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[20]));
            }
        }
        
        /// <remarks/>
        public string VARCOUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[21]));
            }
        }
        
        /// <remarks/>
        public string VARIANT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[22]));
            }
        }
        
        /// <remarks/>
        public string Erreurs {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[23]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void Parse_30CompletedEventHandler(object sender, Parse_30CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Parse_30CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Parse_30CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ACL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ADDITIONALID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string BESTBEFORE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string CIP {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string Company {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string CONTENT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string COUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string Expiry {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string Family {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public string GTIN {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public string LIC {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public string Lot {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
        
        /// <remarks/>
        public string LPP {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[13]));
            }
        }
        
        /// <remarks/>
        public string NaS7 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[14]));
            }
        }
        
        /// <remarks/>
        public string NormalizedBESTBEFORE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[15]));
            }
        }
        
        /// <remarks/>
        public string NormalizedExpiry {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[16]));
            }
        }
        
        /// <remarks/>
        public string NormalizedPRODDATE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[17]));
            }
        }
        
        /// <remarks/>
        public string PCN {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[18]));
            }
        }
        
        /// <remarks/>
        public string PRODDATE {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[19]));
            }
        }
        
        /// <remarks/>
        public string Produit {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[20]));
            }
        }
        
        /// <remarks/>
        public string Quantity {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[21]));
            }
        }
        
        /// <remarks/>
        public string Reference {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[22]));
            }
        }
        
        /// <remarks/>
        public string Serial {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[23]));
            }
        }
        
        /// <remarks/>
        public string SSCC {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[24]));
            }
        }
        
        /// <remarks/>
        public string SubType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[25]));
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[26]));
            }
        }
        
        /// <remarks/>
        public string UCD {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[27]));
            }
        }
        
        /// <remarks/>
        public string UoM {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[28]));
            }
        }
        
        /// <remarks/>
        public string VARCOUNT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[29]));
            }
        }
        
        /// <remarks/>
        public string VARIANT {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[30]));
            }
        }
        
        /// <remarks/>
        public string Erreurs {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[31]));
            }
        }
    }
}

#pragma warning restore 1591